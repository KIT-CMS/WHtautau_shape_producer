from ntuple_processor import Histogram
from ntuple_processor.utils import Selection
import logging
import yaml

m_sv_hist = Histogram("m_sv_puppi", "m_sv_puppi", [i for i in range(0, 255, 5)])
mt_tot_hist = Histogram("mt_tot_puppi", "mt_tot_puppi", [i for i in range(0, 3900, 10)])
ultra_fine_binning = [
    0.3,
    0.30469799,
    0.30939597,
    0.31409396,
    0.31879195,
    0.32348993,
    0.32818792,
    0.33288591,
    0.33758389,
    0.34228188,
    0.34697987,
    0.35167785,
    0.35637584,
    0.36107383,
    0.36577181,
    0.3704698,
    0.37516779,
    0.37986577,
    0.38456376,
    0.38926174,
    0.39395973,
    0.39865772,
    0.4033557,
    0.40805369,
    0.41275168,
    0.41744966,
    0.42214765,
    0.42684564,
    0.43154362,
    0.43624161,
    0.4409396,
    0.44563758,
    0.45033557,
    0.45503356,
    0.45973154,
    0.46442953,
    0.46912752,
    0.4738255,
    0.47852349,
    0.48322148,
    0.48791946,
    0.49261745,
    0.49731544,
    0.50201342,
    0.50671141,
    0.5114094,
    0.51610738,
    0.52080537,
    0.52550336,
    0.53020134,
    0.53489933,
    0.53959732,
    0.5442953,
    0.54899329,
    0.55369128,
    0.55838926,
    0.56308725,
    0.56778523,
    0.57248322,
    0.57718121,
    0.58187919,
    0.58657718,
    0.59127517,
    0.59597315,
    0.60067114,
    0.60536913,
    0.61006711,
    0.6147651,
    0.61946309,
    0.62416107,
    0.62885906,
    0.63355705,
    0.63825503,
    0.64295302,
    0.64765101,
    0.65234899,
    0.65704698,
    0.66174497,
    0.66644295,
    0.67114094,
    0.67583893,
    0.68053691,
    0.6852349,
    0.68993289,
    0.69463087,
    0.69932886,
    0.70402685,
    0.70872483,
    0.71342282,
    0.71812081,
    0.72281879,
    0.72751678,
    0.73221477,
    0.73691275,
    0.74161074,
    0.74630872,
    0.75100671,
    0.7557047,
    0.76040268,
    0.76510067,
    0.76979866,
    0.77449664,
    0.77919463,
    0.78389262,
    0.7885906,
    0.79328859,
    0.79798658,
    0.80268456,
    0.80738255,
    0.81208054,
    0.81677852,
    0.82147651,
    0.8261745,
    0.83087248,
    0.83557047,
    0.84026846,
    0.84496644,
    0.84966443,
    0.85436242,
    0.8590604,
    0.86375839,
    0.86845638,
    0.87315436,
    0.87785235,
    0.88255034,
    0.88724832,
    0.89194631,
    0.8966443,
    0.90134228,
    0.90604027,
    0.91073826,
    0.91543624,
    0.92013423,
    0.92483221,
    0.9295302,
    0.93422819,
    0.93892617,
    0.94362416,
    0.94832215,
    0.95302013,
    0.95771812,
    0.96241611,
    0.96711409,
    0.97181208,
    0.97651007,
    0.98120805,
    0.98590604,
    0.99060403,
    0.99530201,
    1.0,
]
fine_binning = [
    0.3,
    0.3095,
    0.3189,
    0.3284,
    0.3378,
    0.3473,
    0.3568,
    0.3662,
    0.3757,
    0.3851,
    0.3946,
    0.4041,
    0.4135,
    0.423,
    0.4324,
    0.4419,
    0.4514,
    0.4608,
    0.4703,
    0.4797,
    0.4892,
    0.4986,
    0.5081,
    0.5176,
    0.527,
    0.5365,
    0.5459,
    0.5554,
    0.5649,
    0.5743,
    0.5838,
    0.5932,
    0.6027,
    0.6122,
    0.6216,
    0.6311,
    0.6405,
    0.65,
    0.6595,
    0.6689,
    0.6784,
    0.6878,
    0.6973,
    0.7068,
    0.7162,
    0.7257,
    0.7351,
    0.7446,
    0.7541,
    0.7635,
    0.773,
    0.7824,
    0.7919,
    0.8014,
    0.8108,
    0.8203,
    0.8297,
    0.8392,
    0.8486,
    0.8581,
    0.8676,
    0.877,
    0.8865,
    0.8959,
    0.9054,
    0.9149,
    0.9243,
    0.9338,
    0.9432,
    0.9527,
    0.9622,
    0.9716,
    0.9811,
    0.9905,
    1.0,
]
fine_binning_bkg = [
    0.3,
    0.35,
    0.4,
    0.45,
    0.5,
    0.55,
    0.6,
    0.65,
    0.7,
    0.75,
    0.8,
    0.85,
    0.9,
    0.95,
    1.0,
]
coarse_binning = [
    0.3,
    0.4,
    0.5,
    0.6,
    0.7,
    0.8,
    0.9,
    1.0,
]
ultra_coarse_binning = [
    0.3,
    1.0,
]
# hist = Histogram("predicted_max_value", "predicted_max_value", fine_binning)
# pt_2 = Histogram(
#     "pt_2", "pt_2", [15, 16, 17, 18, 20, 23, 25, 30, 35, 55, 75, 95, 140, 200]
# )
# pt_3 = Histogram("pt_3", "pt_3", [15, 18, 20, 23, 25, 30, 35, 55, 75, 95, 140, 200])
pt_1 = Histogram("pt_1", "pt_1", [0, 35, 50, 70, 200])
pt_2 = Histogram("pt_2", "pt_2", [0, 25, 30, 40, 200])
pt_3 = Histogram("pt_3", "pt_3", [0, 25, 35, 45, 200])
met = Histogram("met", "met", [0, 25, 45, 70, 200])
eta_1 = Histogram("eta_1", "eta_1", [-2.5, -1.25, 0.0, 1.25, 2.5])
eta_2 = Histogram("eta_2", "eta_2", [-2.5, -1.25, 0.0, 1.25, 2.5])
eta_3 = Histogram("eta_3", "eta_3", [-2.5, -1.25, 0.0, 1.25, 2.5])
m_vis = Histogram(
    "m_vis",
    "m_vis",
    [0, 40, 50, 70, 200],
)
njets = Histogram("njets", "njets", [-0.5, 0.5, 1.5, 2.5, 3.5, 6.5])
deltaR_12 = Histogram("deltaR_12", "deltaR_12", [0, 0.2, 0.4, 0.6, 0.8, 1.0, 2.0])
deltaR_23 = Histogram("deltaR_23", "deltaR_23", [0, 0.2, 0.4, 0.6, 0.8, 1.0, 2.0])
deltaR_13 = Histogram("deltaR_13", "deltaR_13", [0, 0.2, 0.4, 0.6, 0.8, 1.0, 2.0])

jpt_1 = Histogram("jpt_1", "jpt_1", [20, 21, 23, 25, 35, 40, 60, 140])
jpt_2 = Histogram("jpt_2", "jpt_2", [20, 21, 23, 25, 35, 40, 60, 140])

Lt = Histogram(
    "Lt", "Lt", [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140]
)

deltaPhi_WH = Histogram(
    "deltaPhi_WH", "deltaPhi_WH", [-3.2, -2, -1, 0.0, 1.0, 2.0, 3.2]
)
pt_123met = Histogram("pt_123met", "pt_123met", [10, 30, 50, 70, 90, 120])
deltaeta = Histogram("deltaeta", "abs(eta_1-eta_vis)", [0, 0.5, 1.5, 2.0, 2.5, 3.0])
ptw_low = Histogram("pt_Wl", "pt_W", [0, 150])
ptw_high = Histogram("pt_Wh", "pt_W", [150, 500])


# classdict for NMSSM Index
def nn_cat(channel):
    classdict = {
        "sig": {"index": "0", "binning": ultra_fine_binning},
        "misc": {"index": "1", "binning": ultra_fine_binning},
        "diboson": {"index": "2", "binning": ultra_fine_binning},
    }
    nn_categorization = {"{ch}".format(ch=channel): []}
    catsL_ = nn_categorization["{ch}".format(ch=channel)]
    for category in classdict.keys():
        hist = Histogram(
            "predicted_max_value", "predicted_max_value", classdict[category]["binning"]
        )
        catsL_.append(
            (
                Selection(
                    name="{lab}".format(lab=category),
                    cuts=[
                        (
                            "predicted_class=={index}".format(
                                index=classdict[category]["index"]
                            ),
                            "category_selection",
                        )
                    ],
                ),
                [
                    hist,
                    # ptw_low,
                    # ptw_high,
                    # pt_1,
                    # pt_3,
                    # m_vis,
                    # met,
                    # njets,
                    # eta_1,
                    # eta_2,
                    # eta_3,
                    # njets,
                    # deltaR_12,
                    # deltaR_13,
                    # deltaR_23,
                ],
            )
        )
    nn_categorization = {"{ch}".format(ch=channel): catsL_}
    print(nn_categorization)
    return nn_categorization
    #   [
    #         hist,
    #         m_vis,
    #         met,
    #         pt_1,
    #         pt_2,
    #         pt_3,
    #         eta_1,
    #         eta_2,
    #         eta_3,
    #         deltaR_12,
    #         deltaR_13,
    #         deltaR_23,
    #         njets,
    #         phi_1,
    #         phi_2,
    #         phi_3,
    #         jpt_1,
    #         jpt_2,
    #     ],
